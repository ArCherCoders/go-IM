syntax = "proto3";

package goim.comet;

option go_package = "github.com/Terry-Mao/goim/api/comet;comet";

import "github.com/Terry-Mao/goim/api/protocol/protocol.proto";

message PushMsgReq {
    repeated string keys = 1;
    int32 protoOp = 3;
    goim.protocol.Proto proto = 2;
}

message PushMsgReply {}

message BroadcastReq{
    int32 protoOp = 1;
    goim.protocol.Proto proto = 2;
    int32 speed = 3;
}

message BroadcastReply{}

message BroadcastRoomReq {
    string roomID = 1;
    goim.protocol.Proto proto = 2;
}

message BroadcastRoomReply{}

message RoomsReq{}

message RoomsReply {
    map<string,bool> rooms = 1;
}

service Comet { 
    // PushMsg push by key or mid
    rpc PushMsg(PushMsgReq) returns (PushMsgReply);
    // Broadcast send to every enrity
    rpc Broadcast(BroadcastReq) returns (BroadcastReply);
    // BroadcastRoom broadcast to one room
    rpc BroadcastRoom(BroadcastRoomReq) returns (BroadcastRoomReply);
    // Rooms get all rooms
    rpc Rooms(RoomsReq) returns (RoomsReply);
}

// 应生成

//type CometServer interface {
//// PushMsg push by key or mid
//PushMsg(context.Context, *PushMsgReq) (*PushMsgReply, error)
//// Broadcast send to every enrity
//Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error)
//// BroadcastRoom broadcast to one room
//BroadcastRoom(context.Context, *BroadcastRoomReq) (*BroadcastRoomReply, error)
//// Rooms get all rooms
//Rooms(context.Context, *RoomsReq) (*RoomsReply, error)
//}


//type CometService struct { 实现 GreeterServer 所有的方法就是相当于继承 GreeterServer
//
//}

//port := ":6666"
//l, err := net.Listen("tcp", port)
//if err != nil {
//log.Fatalf("端口监听错误 : %v\n", err)
//}
//fmt.Printf("正在监听： %s 端口\n", port)
//
//
//s:=grpc.NewServer()
//
// 注册  grpc.NewServer(),  ProductService(实现 GreeterServer 所有的方法就是相当于继承 GreeterServer)
//services.RegisterCometServer(s,&services.CometService{})
//
//s.Serve(l)


